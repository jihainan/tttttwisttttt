#! /bin/bash

export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

function install_twist(){
    clear
    twist
    notice
    rootness
    disableselinux
    defaultvalue
    getsystem
    getip
    installlibs
    installbbr
    installsslibev
    configsslibev
    configiptables
    startservices
    twiststatus
}

function uninstall_twist(){
    clear
    twist
    echo -e "#[\033[31;1m              Uninstall Twist Shadowsocks-libev                 \033[0m]#"
    echo -e "#[\033[31;1m              Uninstall will Start in 5 Seconds\033[0m                 ]#"
    echo "#####################################################################"
    sleep 5
    rootness
    if [ -e /etc/init.d/shadowsocks ]; then
        /etc/init.d/shadowsocks stop
    else
        echo -e "#[\033[31;1m             Twist was Not Find on Your Server!\033[0m                 ]#"
        echo ""
        exit 1
    fi
    if grep -qs "Ubunut" /etc/issue || grep -qs "Debian" /etc/issue; then
        update-rc.d -f shadowsocks remove
        iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j DROP
        iptables -I INPUT -m state --state NEW -m udp -p udp --dport 443 -j DROP
    fi
    if grep -qs "CentOS" /etc/issue; then
        chkconfig --del shadowsocks
        systemctl start firewalld
        firewall-cmd --permanent --zone=public --remove-port=443/tcp
        firewall-cmd --permanent --zone=public --remove-port=443/udp
        firewall-cmd --reloa
    fi
    ps -ef | grep -v grep | grep -i "ss-server" > /dev/null 2>&1
    update-rc.d -f shadowsocks remove
    rm -fr /etc/shadowsocks-libev
    rm -f /usr/local/bin/ss-local
    rm -f /usr/local/bin/ss-tunnel
    rm -f /usr/local/bin/ss-server
    rm -f /usr/local/bin/ss-manager
    rm -f /usr/local/bin/ss-redir
    rm -f /usr/local/bin/ss-nat
    rm -f /usr/local/lib/libshadowsocks-libev.a
    rm -f /usr/local/lib/libshadowsocks-libev.la
    rm -f /usr/local/include/shadowsocks.h
    rm -f /usr/local/lib/pkgconfig/shadowsocks-libev.pc
    rm -f /usr/local/share/man/man1/ss-local.1
    rm -f /usr/local/share/man/man1/ss-tunnel.1
    rm -f /usr/local/share/man/man1/ss-server.1
    rm -f /usr/local/share/man/man1/ss-manager.1
    rm -f /usr/local/share/man/man1/ss-redir.1
    rm -f /usr/local/share/man/man1/ss-nat.1
    rm -f /usr/local/share/man/man8/shadowsocks-libev.8
    rm -fr /usr/local/share/doc/shadowsocks-libev
    rm -f /etc/init.d/shadowsocks
    clear
    twist
    echo -e "#[\033[32;1m               Twist Uninstallation Finished\033[0m                    ]#"
    echo "#####################################################################"
    echo ""
    exit 1
}

function twist(){
    echo "######################################################################"
    echo "#####################################################################"
    echo "       ###       ###         ###     ###      #########    #########"
    echo "       ###        ###    #  ###     ###      ##               ##"
    echo "       ###         ###  ## ###     ###      #########        ##"
    echo "       ###          ### ## ##     ###             ##        ##"
    echo "       ###           ### ###     ###      #########        ##"
    echo ""
}

function notice(){
    echo -e "#[\033[32;1m         Install Shadowsocks-libev Script By Unbinilium\033[0m          ]#"
    echo -e "#[\033[32;1m             Installation will Start in 5 Seconds\033[0m                ]#"
    echo "#####################################################################"
    sleep 5
}

function rootness(){
    if [ $EUID -ne 0 ]; then
        echo -e "# [\033[31;1mError:This script must be run as root! Please Run this script with root access\033[0m]" 1>&2
        echo ""
        exit 1
    fi
}

function disableselinux(){
    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
        setenforce 0
    fi
}

function defaultvalue(){
    BBR="enable"
    ETH="eth0"
    SSLOCAL="[\"[::0]\",\"0.0.0.0\"]"
    IPREGEX="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
}

function getsystem(){
systemtype="0"
    echo "$(cat /etc/issue)" | grep -q "CentOS"
    if [ $? -eq 0 ]; then
        if [ ! -f /etc/redhat-release ] || ! grep -qs -e "release 6" -e "release 7" /etc/redhat-release; then
            echo -e "# [\033[31;1mPlease Make Sure the Server OS Verison is CentOS/RHEL 6 or 7! Aborting!\033[0m]"
            echo ""
            exit 1
        else
            systemtype="0"
        fi
    else
        echo "$(cat /etc/issue)" | grep -q "Ubuntu"
        if [ $? -eq 0 ]; then
            systemtype="1"
        else
            echo "$(cat /etc/issue)" | grep -q "Debian"
            if [ $? -eq 0 ]; then
                systemtype="1"
            else
                echo -e "# [\033[31;1mThis Script Must be Run on Ubuntu, Debian or CentOS! Aborating!\033[0m]"
                echo ""
                exit 1
            fi
        fi
    fi
    ethstatus="$(cat /sys/class/net/${ETH}/operstate 2>/dev/null)"
    if [ -z "$ethstatus" ] || [ "$ethstatus" = "down" ]; then
        echo -e "# [\033[31;1mNetwork Interface '${ETH}' is Not Available. Please try Another Network Interface Listed Below.\033[0m]" 1>&2
        echo ""
        ip link
        echo ""
        echo -e "Please Enter [\033[32;1mNetwork Interface Name\033[0m]:"
        read -p "Input Devices Name (Default:${ETH}):" eth
     	if [ ! "$eth" = "" ]; then
            ethstatus="$(cat /sys/class/net/${eth}/operstate 2>/dev/null)"
            if [ -z "$ethstatus" ] || [ "$ethstatus" = "down" ]; then
                echo ""
                echo -e "# [\033[31;1mNetwork Interface Your Entered is Not Available! Aborting!\033[0m]" 1>&2
                echo ""
                exit 1
            else
                ETH="$eth"
                echo ""
                echo -e "# Network Interface Check Passed, your VPN Will be Setup Using Interface '${ETH}'"
                echo ""
            fi
        fi
     fi
     if [ -f /proc/user_beancounters ]; then
         BBR="disable"
     fi
}

function getip(){
    PUBLICIP="$(curl -s diagnostic.opendns.com/myip)"
    [ -z "$PUBLICIP" ] && PUBLICIP="$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)"
    if ! printf %s "$PUBLICIP" | grep -Eq "$IPREGEX"; then
        echo ""
        echo -e "# [\033[31;1mCannot find Valid Public IP. Please Fill Your IP Address Below!\033[0m]"
        read -p "Input Your Public IP:" publicip
        if ! printf %s "$publicip" | grep -Eq "$IPREGEX"; then
            echo ""
            echo -e "# [\033[31;1mThe IP:${publicip} You Entered is Out of Range! Aborting!\033[0m]"
            echo ""
            exit 1
        else
            PUBLICIP="$publicip"
            echo ""
            echo -e "# [\033[32;1mYour Public IP:${PUBLICIP}, Server will Detect Connection Automaticly.\033[0m]"
            echo ""
        fi
    fi
    if [ -f /proc/net/if_inet6 ]; then
        if [ "$systemtype" = "1" ]; then
            echo "iface $ETH inet6 dhcp" > /etc/network/interfaces.d/60-default-with-ipv6.cfg
            ifdown $ETH && ifup $ETH
            PUBLICIPv6="$(ifconfig | grep -E '(Link|inet6)' | grep -v "Scope:Global")"
            if [ -z "$PUBLICIPv6" ]; then
                SSLOCAL="\"0.0.0.0\""
            fi
        else
            sed -i "/^\<IPV6INIT=\>/d" /etc/sysconfig/network-scripts/ifcfg-eth0
            cat >> /etc/sysconfig/network-scripts/ifcfg-eth0 <<EOF
IPV6INIT="yes"
DHCPV6C=yes
NM_CONTROLLED=no
EOF
            echo "NETWORKING_IPV6=yes" >> /etc/sysconfig/network
            sudo service network restart
            PUBLICIPv6="$(ifconfig | grep -E '(Link|inet6)' | grep -v "Scope:Global")"
            if [ -z "$PUBLICIPv6" ]; then
                SSLOCAL="\"0.0.0.0\""
            fi
        fi
    else
        SSLOCAL="\"0.0.0.0\""
    fi
}

function installlibs(){
    if [ "$systemtype" = "0" ]; then
	yum -y update || { echo ""; echo -e "# [\033[31;1mCannot Update Source! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        yum -y install wget bind-utils || { echo ""; echo -e "# [\033[31;1mCannot Install Libs! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        yum -y install gawk grep sed net-tools greenlet || { echo ""; echo -e "# [\033[31;1mCannot Install Libs! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        yum -y install epel-release
        yum list installed epel-release >/dev/null 2>&1
        [ "$?" != "0" ] && { echo -e "# [\033[31;1mCannot Add EPEL repository! Aborting!\033[0m]"; exit 1; }
        yum -y install swig python python-devel python-setuptools python-pip libevent curl curl-devel zlib-devel gevent || { echo ""; echo -e "# [\033[31;1mCannot Install Libs! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        yum -y install gcc gettext-devel autoconf automake make zlib-devel libtool xmlto asciidoc udns-devel libev-devel || { echo ""; echo -e "# [\033[31;1mCannot Install Libs! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        yum -y install pcre pcre-devel perl perl-devel cpio expat-devel openssl-devel mbedtls-devel git || { echo ""; echo -e "# [\033[31;1mCannot Install Libs! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        yum -y install fail2ban || { echo ""; echo -e "# [\033[31;1mCannot Install Fail2ban! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        pip install -q qrcode
        if grep -qs "release 6" /etc/redhat-release; then
            yum -y install iptables-ipv6
            yum -y remove libevent-devel
            yum -y install libevent2-devel
        elif grep -qs "release 7" /etc/redhat-release; then
            yum -y install libevent-devel
        fi
    else
        apt-get -yq update || { echo ""; echo -e "# [\033[31;1mCannot Update Source! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        apt-get -yq install wget dnsutils git || { echo ""; echo -e "# [\033[31;1mCannot Install Libs! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        apt-get -yq install gawk grep sed net-tools || { echo ""; echo -e "# [\033[31;1mCannot Install Libs! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        apt-get -yq install python python-dev python-pip python-setuptools python-m2crypto curl gcc swig make perl cpio build-essential libevent-dev || { echo ""; echo -e "# [\033[31;1mCannot Install Libs! Please Check Your Network!\033[0m]"; echo ""; exit 1; }   
        apt-get -y --no-install-recommends install gettext build-essential autoconf automake libtool openssl libssl-dev zlib1g-dev xmlto asciidoc libpcre3-dev libudns-dev libev-dev || { echo ""; echo -e "# [\033[31;1mCannot Install Libs! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        apt-get -yq install fail2ban || { echo ""; echo -e "# [\033[31;1mCannot Install Fail2ban! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
        easy_install -q greenlet
        easy_install -q gevent
        pip install -q qrcode
   fi
}

function installbbr(){
    [ "$BBR" = "enable" ] && KERNELVER="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/ | awk -F'\"v' '/v[4-9]./{print $2}' | cut -d/ -f1 | grep -v -  | sort -V | tail -1)"
    [ "$BBR" = "enable" ] && [ -z "$KERNELVER" ] && BBR="disable" && echo -e "# [\033[31;1mCannot Check Linux KERNEL Verison. BBR will NOT Working!\033[0m]"
    if [ "$BBR" = "enable" ] && [ "$(echo "$KERNELVER" | cut -d'.' -f1,2)">="$(uname -a | grep -oE '[0-9]+\.[0-9]+' | cut -d'.' -f1,2)" ]; then
        if [ "$systemtype" = "1" ]; then
            SYSTYPE="$(dpkg --print-architecture)"
            if [ "$SYSTYPE" = "amd64" ]; then
                KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/amd64.deb/{print $2}' | cut -d'<' -f1 | head -1)"
            else
                if [ "$SYSTYPE" = "i386" ]; then
                    KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/i386.deb/{print $2}' | cut -d'<' -f1 | head -1)"
                else
                    if [ "$SYSTYPE" = "armhf" ]; then
                        KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/armhf.deb/{print $2}' | cut -d'<' -f1 | head -1)"
                    else
                        if [ "$SYSTYPE" = "arm64" ]; then
                            KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/arm64.deb/{print $2}' | cut -d'<' -f1 | head -1)"
                        else
                            if [ "$SYSTYPE" = "ppc64el" ]; then
                                KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/ppc64el.deb/{print $2}' | cut -d'<' -f1 | head -1)"
                            else
                                if [ "$SYSTYPE" = "s390x" ]; then
                                    KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/s390x.deb/{print $2}' | cut -d'<' -f1 | head -1)"
                                else
                                    echo ""
                                    echo -e "# \033[31;1mUnable to Find New KERNEL! Aborting!\033[0m"
                                    echo ""
                                    exit 1
                                fi
                            fi
                        fi
                    fi
                fi
            fi
            wget -t 3 -T 30 -nv -O "$KERNEL" "http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/${KERNEL}"
            [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot Download Linux KERNEL! Please Check Your Network!\033[0m]"; echo ""; exit 1; }
            dpkg -i $KERNEL || { echo ""; echo -e "# [\033[31;1mCannot Update KERNEL! BBR will Not Run on Your Server!\033[0m]"; echo ""; sleep 3; BBR="disable"; }
            dpkg -l | grep linux-image
            rm -f $KERNEL
            update-grub
        else
            if centosversion 6; then
                yum --enablerepo=elrepo-kernel install kernel-lt || { echo ""; echo -e "# [\033[31;1mCannot Update KERNEL! BBR will Not Run on Your Server!\033[0m]"; echo ""; sleep 3; BBR="disable"; }
            elif centosversion 7; then
                yum --enablerepo=elrepo-kernel install kernel-ml || { echo ""; echo -e "# [\033[31;1mCannot Update KERNEL! BBR will Not Run on Your Server!\033[0m]"; echo ""; sleep 3; BBR="disable"; }
            fi
        fi
    fi
}

function installsslibev(){
    installpath="$(pwd)"
    cd $installpath
    libsodiumver="$(wget -qO- https://download.libsodium.org/libsodium/releases/ | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | cut -d'.' -f1,2,3 | sort -V | tail -1)"
    wget -t 3 -T 30 -nv -O libsodium-${libsodiumver}.tar.gz https://github.com/jedisct1/libsodium/releases/download/${libsodiumver}/libsodium-${libsodiumver}.tar.gz
    [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot Download Libsodium Source. Aborting.\033[0m]"; echo ""; exit 1; }
    [ -d libsodium-${libsodiumver} ] && rm -rf libsodium-${libsodiumver}
    tar zxf libsodium-${libsodiumver}.tar.gz
    cd libsodium-${libsodiumver}
    ./configure --prefix=/usr && make && make install || { echo ""; echo －e "# [\033[31;1mLibsodium Failed to Build. Aborting.\033[0m]"; echo ""; exit 1; }
    cd $installpath
    mbedver="$(wget -qO- https://tls.mbed.org/download-archive | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | cut -d'.' -f1,2,3 | sort -V | tail -1)"
    wget -t 3 -T 30 -nv -O mbedtls-${mbedver}-gpl.tgz https://tls.mbed.org/download/mbedtls-${mbedver}-gpl.tgz
    [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot Download MBED Source. Aborting.\033[0m]"; echo ""; exit 1; }
    [ -d mbedtls-${mbedver} ] && rm -rf mbedtls-${mbedver}
    tar xf mbedtls-${mbedver}-gpl.tgz
    cd mbedtls-${mbedver}
    make SHARED=1 CFLAGS=-fPIC
    make DESTDIR=/usr install || { echo ""; echo －e "# [\033[31;1mMBED Failed to Build. Aborting.\033[0m]"; echo ""; exit 1; }
    ldconfig
    cd $installpath
    sslibevtag="$(wget -qO- https://api.github.com/repos/shadowsocks/shadowsocks-libev/releases/latest | grep 'tag_name' | cut -d\" -f4)"
    sslibevver="shadowsocks-libev-$(echo ${sslibevtag} | sed -e 's/^[a-zA-Z]//g')"
    wget -t 3 -T 30 -nv -O ${sslibevver}.tar.gz https://github.com/shadowsocks/shadowsocks-libev/releases/download/${sslibevtag}/${sslibevver}.tar.gz
    [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot Download Shadowsocks-libev Source. Aborting.\033[0m]"; echo ""; exit 1; }
    [ -d ${sslibevver} ] && rm -rf ${sslibevver}
    tar zxf ${sslibevver}.tar.gz
    cd $sslibevver
    ./configure
    make || { echo ""; echo －e "# [\033[31;1mShadowsocks-libev Failed to Build. Aborting.\033[0m]"; echo ""; exit 1; }
    make install || { echo ""; echo －e "# [\033[31;1mShadowsocks-libev Failed to Build. Aborting.\033[0m]"; echo ""; exit 1; }
    cd $installpath
    [ -d simple-obfs ] && rm -rf simple-obfs
    git clone https://github.com/shadowsocks/simple-obfs.git
    cd simple-obfs
    git submodule update --init --recursive
    ./autogen.sh
    ./configure
    make || { echo ""; echo －e "# [\033[31;1mShadowsocks-Simple-obfs Failed to Build. Aborting.\033[0m]"; echo ""; exit 1; }
    make install || { echo ""; echo －e "# [\033[31;1mShadowsocks-Simple-obfs Failed to Build. Aborting.\033[0m]"; echo ""; exit 1; }
    cd $installpath
    rm -rf libsodium-${libsodiumver}.tar.gz libsodium-${libsodiumver} mbedtls-${mbedver}-gpl.tgz mbedtls-${mbedver} ${sslibevver}.tar.gz $sslibevver simple-obfs
}

function configsslibev(){
    date="$(date +%Y-%m-%d-%H:%M:%S)"
    PASSWORD="$(< /dev/urandom tr -dc 'A-HJ-NPR-Za-km-z2-9' | head -c 32)"
    [ -d /etc/shadowsocks-libev ] || mkdir -p /etc/shadowsocks-libev
    cat > /etc/shadowsocks-libev/config.json<<EOF
{
    "server":${SSLOCAL},
    "server_port":443,
    "local_address":"127.0.0.1",
    "local_port":1080,
    "password":"${PASSWORD}",
    "timeout":600,
    "udp_timeout":600,
    "method":"chacha20-ietf-poly1305",
    "plugin":"obfs-server",
    "plugin_opts":"obfs=tls;fast-open;obfs-host=icloud.com",
    "mode":"tcp_and_udp",
    "fast_open":true,
    "workers":256,
}
EOF
    if ! grep -qs "Twist" /etc/sysctl.conf; then
        /bin/cp -f /etc/sysctl.conf "/etc/sysctl.conf.old-${date}" 2>/dev/null
        cat >> /etc/sysctl.conf <<EOF
# Twist Configs
fs.file-max = 1024000
kernel.msgmnb = 65536
kernel.msgmax = 65536
kernel.shmmax = 68719476736
kernel.shmall = 4294967296
net.core.wmem_max = 12582912
net.core.rmem_max = 12582912
net.ipv4.tcp_rmem = 10240 87380 12582912
net.ipv4.tcp_wmem = 10240 87380 12582912
net.ipv4.ip_forward = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.tcp_mtu_probing = 1
net.ipv4.conf.all.accept_source_route = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.rp_filter = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.tcp_fastopen = 3
net.ipv6.conf.all.accept_source_route = 1
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.all.autoconf = 1
net.ipv6.conf.all.forwarding = 1
net.ipv6.conf.${ETH}.accept_ra = 2
EOF
        if [ "$BBR" = "enable" ]; then
            echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
            echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
        fi
	sed -i "/^\<# End of file\>/d" /etc/security/limits.conf
	echo "*                soft    nofile           512000" >> /etc/security/limits.conf
	echo "*                hard    nofile          1024000" >> /etc/security/limits.conf
	echo "" >> /etc/security/limits.conf
	echo "# End of file" >> /etc/security/limits.conf
	if [ "$systemtype" = "0" ] && ! grep -qs "pam_limits.so" /etc/pam.d/login; then
            echo "session    required     pam_limits.so" >> /etc/pam.d/login
	fi
    fi
}

function configiptables(){
    if ! grep -qs "Twist" /etc/sysctl.conf; then
        iptables-save > "/etc/iptables.rules.old-${date}"
        iptables -I INPUT 1 -m conntrack --ctstate INVALID -j DROP
        iptables -I INPUT 2 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
        iptables -I INPUT 3 -p udp -m multiport --dports 443 -j ACCEPT
        iptables -I FORWARD 1 -m conntrack --ctstate INVALID -j DROP
        iptables -I FORWARD 2 -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT
        iptables -I INPUT -m state --state NEW -m udp -p udp --dport 443 -j ACCEPT
        /bin/cp -f /etc/ip6tables.rules "/etc/ip6tables.rules.old-${date}" 2>/dev/null
        [ -f /etc/iptables/rules.v6 ] || cat > /etc/ip6tables.rules <<EOF
# Twist Configs
*filter
:INPUT ACCEPT [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -m rt --rt-type 0 -j DROP
-A INPUT -s fe80::/10 -j ACCEPT
-A INPUT -p ipv6-icmp -j ACCEPT
-A INPUT -j DROP
COMMIT
EOF
        if [ -f /etc/iptables/rules.v6 ]; then
            /bin/cp -f /etc/iptables/rules.v6 "/etc/iptables/rules.v6.old-${date}"
            /bin/cp -f /etc/ip6tables.rules /etc/iptables/rules.v6
        fi
    fi
    if ! grep -qs "Twist" /etc/sysctl.conf && [ "$systemtype" = "0" ]; then
        iptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        systemctl start firewalld
        firewall-cmd --permanent --zone=public --add-port=443/tcp
        firewall-cmd --permanent --zone=public --add-port=443/udp
        firewall-cmd --reload
    fi
    if [ "$systemtype" = "1" ]; then
        cat > /etc/network/if-pre-up.d/iptablesload <<EOF
#!/bin/sh
iptables-restore < /etc/iptables.rules
exit 0
EOF
        cat > /etc/network/if-pre-up.d/ip6tablesload <<EOF
#!/bin/sh
ip6tables-restore < /etc/ip6tables.rules
exit 0
EOF
    else
        cat > /etc/network/if-pre-up.d/iptablesload <<EOF
#!/bin/sh
iptables-restore < /etc/iptables.rules
exit 0
EOF
    fi
    if [ "$systemtype" = "0" ] && [ ! -f /etc/fail2ban/jail.local ] ; then
        cat > /etc/fail2ban/jail.local <<'EOF'
[ssh-iptables]
enabled  = true
filter   = sshd
action   = iptables[name=SSH, port=ssh, protocol=tcp]
logpath  = /var/log/secure
EOF
    fi
}

function startservices(){
    echo "#!/bin/bash" > /etc/init.d/shadowsocks
    if [  "$systemtype" = "0" ]; then
        cat >> /etc/init.d/shadowsocks <<EOF
# chkconfig: 2345 90 10
# description: Start or stop the Shadowsocks-libev server
EOF
    fi
    cat >> /etc/init.d/shadowsocks <<EOF

### BEGIN INIT INFO
# Provides:          Shadowsocks-libev
# Required-Start:    \$network \$local_fs $remote_fs
# Required-Stop:     \$network \$local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Shadowsocks-libev
# Description:       Start or stop the Shadowsocks-libev server
### END INIT INFO

if [ -f /usr/local/bin/ss-server ]; then
    SSDIRECTION=/usr/local/bin/ss-server
elif [ -f /usr/bin/ss-server ]; then
    SSDIRECTION=/usr/bin/ss-server
fi

[ -x \$SSDIRECTION ] || exit 0

RETVAL=0

if [ ! -d /var/run ]; then
    mkdir -p /var/run
    if [ \$? -ne 0 ]; then
        echo -e "# \033[31;1mStarting Shadowsocks-libev Failed...\033[0m"
        exit 1
    fi
fi

if [ ! -f /etc/shadowsocks-libev/config.json ]; then
    echo -e "# \033[31;1mStarting Shadowsocks-libev Failed...\033[0m"
    exit 1
fi

sslibev_running() {
    if [ -r /var/run/shadowsocks-libev.pid ]; then
        read PID < /var/run/shadowsocks-libev.pid
        if [ -d "/proc/\${PID}" ]; then
            return 0
        else
            rm -f /var/run/shadowsocks-libev.pid
            return 1
        fi
    else
        return 2
    fi
}

sslibev_status() {
    sslibev_running
    case \$? in
        0)
        echo -e "# \033[32;1mShadowsocks-libev is Already Running...\033[0m"
        ;;
        1|2)
        echo -e "# \033[34;1mShadowsocks-libev is Stopped...\033[0m"
        RETVAL=1
        ;;
    esac
}

sslibev_start() {
    if sslibev_running; then
        echo -e "# \033[32;1mShadowsocks-libev is Already Running...\033[0m"
        return 0
    fi
    \$SSDIRECTION -u -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks-libev.pid
    if sslibev_running; then
        echo -e "# \033[32;1mStarting Shadowsocks-libev Success...\033[0m"
    else
        echo -e "# \033[31;1mStarting Shadowsocks-libev Failed...\033[0m"
        RETVAL=1
    fi
}

sslibev_stop() {
    if sslibev_running; then
        kill -9 \$PID
        rm -f /var/run/shadowsocks-libev.pid
        echo -e "# \033[32;1mStopping Shadowsocks-libev Success...\033[0m"
    else
        echo -e "# \033[34;1mShadowsocks-libev is Stopped...\033[0m"
        RETVAL=1
    fi
}

sslibev_restart() {
    sslibev_stop
    sslibev_start
}

case "\$1" in
    start|stop|restart|status)
    sslibev_\${1}
    ;;
    *)
    echo "Usage: \$0 { start | stop | restart | status }"
    RETVAL=1
    ;;
esac

exit \$RETVAL

EOF
    chmod +x /etc/init.d/shadowsocks
    if [ "$systemtype" = "1" ]; then
        update-rc.d -f shadowsocks defaults
        ldconfig
    else
        chkconfig --add shadowsocks
        chkconfig shadowsocks on
    fi
    cat >> /etc/rc.local <<EOF
dhclient -6
service fail2ban restart
sysctl -e -p
EOF
    sysctl -e -q -p 2>/dev/null
    chmod +x /etc/rc.local
    chmod +x /etc/network/if-pre-up.d/iptablesload
    chmod +x /etc/network/if-pre-up.d/ip6tablesload
    if [ "$systemtype" = "1" ]; then
        ip6tables-restore < /etc/ip6tables.rules
	if grep -qs "release 6" /etc/redhat-release; then
            chkconfig iptables on
            chkconfig fail2ban on
        else
            systemctl --now mask firewalld 2>/dev/null
            systemctl enable iptables fail2ban 2>/dev/null
        fi
    else
        iptables-restore < /etc/sysconfig/iptables
	systemctl --now mask firewalld 2>/dev/null
        systemctl enable iptables fail2ban 2>/dev/null
    fi
    service fail2ban restart
    /etc/init.d/shadowsocks start
}

function twiststatus(){
    clear
    twist
    echo -e "                            [\033[32;1mInstall Complete\033[0m]"
    echo -e "          [\033[32;1mPlease Press Enter to Show Login Infomation and EXIT\033[0m]"
    echo -e "########################################################################"
    read -p ""
    echo -e "# [\033[32;1mss://\033[0m\033[34;1m$(echo -n chacha20-ietf-poly1305:${PASSWORD}@${PUBLICIP}:443 | base64)\033[0m]"
    echo -n "ss://"$(echo -n chacha20-ietf-poly1305:${PASSWORD}@${PUBLICIP}:443 | base64) | qr
    echo -e "# [\033[32;1mServer IP:\033[0m \033[34;1m${PUBLICIP}\033[0m \033[32;1mPassWord:\033[0m \033[34;1m${PASSWORD}\033[0m \033[32;1mEncryption:\033[0m \033[34;1mchacha20-ietf-poly1305\033[0m \033[32;1mOBFS:\033[0m \033[34;1mtls\033[0m \033[32;1mOBFS-HOST:\033[0m \033[34;1micloud.com\033[0m \033[32;1mLOCALHOST:\033[0m \033[34;1m127.0.0.1:1080\033[0m]"
    if [ "$BBR" = "enable" ]; then
        echo -e "\033[34;1mThe Server Requires Restart to Enable Google BBR,Please Press Enter to Reboot!\033[0m"
        read -p ""
        sleep 3
	reboot
    fi
}

action=$1
[ -z $1 ] && action=install
case "$action" in
    install|uninstall)
        ${action}_twist
        ;;
    *)
        echo "Usage: $0 { install | uninstall }"
        ;;
esac
